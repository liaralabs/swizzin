{
    // Place your swizzin workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    //
    //
    // User snippets
    //
    "Get master username": {
        "scope": "shellscript",
        "prefix": [
            "_get_master_username",
            "master"
        ],
        "body": [
            "_get_master_username"
        ],
        "description": "Returns username of master user"
    },
    "Get user pasword": {
        "scope": "shellscript",
        "prefix": [
            "_get_user_password",
            "password"
        ],
        "body": [
            "_get_user_password"
        ]
    },
    "Get user list": {
        "scope": "shellscript",
        "prefix": [
            "_get_user_list",
            "userlist",
        ],
        "body": [
            "_get_user_list"
        ]
    },
    "Set a user array": {
        "scope": "shellscript",
        "prefix": "users",
        "body": [
            "readarray -t ${1:users} < <(_get_user_list)"
        ],
        "description": "Defines an array which contains all the swizzin users"
    },
    //
    // ECHOES
    //
    "Echo Success": {
        "scope": "shellscript",
        "prefix": [
            "echo_success",
            "success"
        ],
        "body": "echo_success \"${1:message}\""
    },
    "Echo query": {
        "scope": "shellscript",
        "prefix": [
            "echo_query",
            "query"
        ],
        "body": "echo_query \"${1:message}\" \"${2:hint}\""
    },
    "Echo query to variable": {
        "scope": "shellscript",
        "prefix": [
            "echo_query2var",
            "query2var"
        ],
        "body": [
            "echo_query \"${1:message}\" \"${2:default}\"",
            "read -r ${3:variable}"
        ],
        "description": "Creates an echo query and reads stdin into a variable"
    },
    "Echo info": {
        "scope": "shellscript",
        "prefix": [
            "echo_info",
            "info"
        ],
        "body": "echo_info \"${1:message}\""
    },
    "Echo log_only": {
        "scope": "shellscript",
        "prefix": [
            "echo_log_only",
            "log_only",
            "log"
        ],
        "body": "echo_log_only \"${1:message}\""
    },
    "Echo progress_start": {
        "scope": "shellscript",
        "prefix": [
            "echo_progress_start",
            "progress_start",
            "start"
        ],
        "body": "echo_progress_start \"${1:message}\""
    },
    "Echo progress_done": {
        "scope": "shellscript",
        "prefix": [
            "echo_progress_done",
            "progress_done",
            "start"
        ],
        "body": "echo_progress_done \"${1:message}\""
    },
    "Ask a yes/no question with if block": {
        "scope": "shellscript",
        "prefix": [
            "ask"
        ],
        "body": [
            "if ask \"${1:question}\" ${2|,Y,N|}; then",
            "${3:\t# yes condition}",
            "else",
            "${4:\t# nocondition}",
            "fi"
        ]
    },
    //
    // Other utils
    //
    "Remove if exists": {
        "scope": "shellscript",
        "prefix": [
            "rmif",
            "rmifexists"
        ],
        "body": [
            "rm_if_exists \"${1:path}\""
        ]
    },
    "Source a swizzin util": {
        "scope": "shellscript",
        "prefix": [
            "source"
        ],
        "body": [
            "#shellcheck source=sources/functions/${1:util}",
            ". /etc/swizzin/sources/functions/${1:util}"
        ],
        "description": "Adds a source to a swizzin function.\nPrepends the appropriate shellcheck declaration"
    }
}