#!/bin/bash
# GPLv3, flying_sayusages for Swizzin 2020
# Swizzin troubleshooting utility
# The tool does the following:
# - Lets user make choices about applications and system components to examine
# - Compiles all the info for each application
# - Sanitizes those logs
# - Posts them online and saves deletion links when necessary

# shellcheck source=sources/globals.sh
. /etc/swizzin/sources/globals.sh
# shellcheck source=sources/functions/utils
. /etc/swizzin/sources/functions/utils
privatebinlog="/root/logs/privatebin.log"

# Picks privatebin if available, otherwise offers the choice to install or use termbin
_choose_pastehost() {
    if which privatebin > /dev/null; then
        echo_info "Using privatebin.net"
        echo -e "\n\n###### Links from $(date)"
        pastetool="privatebin"
    else
        echo_warn "Privatebin CLI tool not installed. Without it, logs will not be e2e encrypted and can not be deleted; termbin.com will be used."
        if ask "Install Privatebin CLI tool?"; then
            # TODO change permissions on this file to +x so I don't have ti use bash because of the NTFS perms translation
            bash /etc/swizzin/scripts/install/privatebincli.sh || {
                echo_error "Please attempt a reinstall with box install privatebin. Exiting."
                exit 1
            }
            pastetool="privatebin"
        else
            echo_info "Continuing with termbin.com"
            pastetool="termbin"
        fi

    fi
}

# Processes a file and posts it online
# Takes stdin, washes it, posts it on the required platform
_post_content() {
    if [[ $pastetool == "privatebin" ]]; then
        # TODO check this works as expected
        tmpid=$(uuidgen)
        cat | _wash_content > /tmp/"$tmpid"
        touch $privatebinlog
        echo "" >> $privatebinlog
        cat /tmp/"$tmpid" | privatebin send -o text --textformat markdown >> $privatebinlog
        # privatebin send -o text "$(cat /tmp/"$tmpid")" >> $privatebinlog
        rm /tmp/"$tmpid"
        tail -3 $privatebinlog | grep "pasteURL" | awk '{print $2}'
    else
        _wash_content | nc termbin.com 9999
    fi
}

# Removes any private info out of stdin
_wash_content() {
    # Makes the pattern from every two items in the array
    cur_sensitive=("${sensitive[@]}" "${app_sensitive[@]}")
    sedString="$(printf 's/%s/%s/g; ' "${cur_sensitive[@]}")"
    tr -d '\0' | sed "$sedString" | tr -d '\0' 2> $log
}

#Creates a search pattern for sed
# the array is (search1 replace1 search2 replace2 etc.)
_set_identifiable_values() {
    echo_progress_start "Constructing array for washing sensitive information"
    sensitive=()
    sensitive+=("$loguser" "###-USER-###")
    sensitive+=("$(_get_user_password "$loguser")" "###-PASSWORD-###")

    extip=$(curl -s -4 icanhazip.com | sed 's|\.|\\.|g')
    sensitive+=("$extip" "###-EXTIP-###")

    sensitive+=("$(ip route get 1 | sed -n 's/^.*src \([0-9.]*\) .*$/\1/p' | sed 's|\.|\\.|g')" "###-IPADDR-###")

    for domain in $(guess_domains | sed 's|\.|\\.|g'); do
        sensitive+=("$domain" "###-DOMAIN-###")
    done

    for hoststr in $(
        hostname -A | sed 's|\.|\\.|g'
        hostname -a | sed 's|\.|\\.|g'
    ); do
        sensitive+=("$hoststr" "###-HOST-###")
    done

    echo_progress_done "Array constructed"
}

#Holds whiptails
_make_app_choices() {
    # Get a list of installed apps to make logs for
    sysoptions=(
        journalctl "" off
        syslog "" off
        apt "" off
        dmesg "" off
        kern "" off
    )
    cmd=(whiptail --title "Choose system components to include" --separate-output --checklist "The logs for the selected applications will be included in the paste for your issue" 15 50 7)
    if ! choices+=$("${cmd[@]}" "${sysoptions[@]}" 2>&1 > /dev/tty); then
        echo_warn "Upload cancelled"
        exit 1
    fi
    list_installed=($(find /install -type f -name .*.lock | awk -F. '{print $2}'))
    cmd=(whiptail --title "Choose apps to include" --separate-output --checklist "The logs for the selected applications will be included in the paste for your issue" 15 50 7)
    #shellcheck disable=2086 # The result is broken when it actually is quoted, we want the words to expand here.
    # readarray -t options < <(printf '%s\n""\nON\n' "${list_installed[@]}")
    appoptions=()
    for app in "${list_installed[@]}"; do
        appoptions+=("$app" "" off)
    done
    choices+=" "
    if ! choices+=$("${cmd[@]}" "${appoptions[@]}" 2>&1 > /dev/tty); then
        echo_warn "Upload cancelled"
        exit 1
    fi

    # Determine which users to uploads logs for when MU apps are being used
    readarray users < <(_get_nonmaster_list)
    if [[ ${#users[@]} -eq 0 ]]; then
        loguser=$(_get_master_username)
    else
        useroptions=("$(_get_master_username)" "" on)
        for u in "${users[@]}"; do
            useroptions+=("$u" "" off)
        done
        if ! loguser=$(whiptail --radiolist "Which user to upload the logs for their MU apps?" 9 50 2 "${useroptions[@]}" 2>&1 > /dev/tty); then
            echo_warn "Upload cancelled"
            exit 1
        fi
    fi
}

#Holds all the logic for creating the application logs array
_log_uploads() {
    echo_progress_start "Uploading logs to $pastetool"
    # TODO maybe ensure only last N bytes are being sent in order not to hit the limit?

    #shellcheck source=sources/functions/utils
    . /etc/swizzin/sources/functions/utils
    master=$(_get_master_username)

    app_sensitive=()
    logs_install="$(cat /root/logs/install.log | _post_content)"
    logs_swizzin=$(cat /root/logs/swizzin.log | _post_content)

    logs_app_list=()
    for choice in $choices; do
        paths=()
        commands=()
        note=""
        version=
        app_sensitive=()

        logscript=/etc/swizzin/scripts/info/$choice.sh
        if [ -e "$logscript" ]; then
            . "$logscript"
        else
            echo_warn "No loggin variables for $choice defined, please upload these manually"
        fi

        # Generating file to post
        tmpfile="/tmp/$choice"
        for cmdbruh in "${commands[@]}"; do
            {
                echo "# Output of \"$cmdbruh\""
                echo "\`\`\`"
                $cmdbruh
                echo "\`\`\`"
                echo
            } >> "$tmpfile" 2>&1
        done

        for path in "${paths[@]}"; do
            {
                echo "# Content of \"$path\""
                echo "\`\`\`"
                cat "$path"
                echo "\`\`\`"
                echo ""
            } >> "$tmpfile" 2>&1
        done

        link=''
        if [[ -s "$tmpfile" ]]; then
            link=$(_post_content < "$tmpfile")
            rm "$tmpfile"
        else
            note="_(No logs generated for $choice)_"
        fi

        if [[ -n $version ]]; then
            logs_app_list+=("$choice ($version)" "$link" "$note")
        else
            logs_app_list+=("$choice" "$link" "$note")
        fi

    done
    echo_progress_done "Logs uploaded"
}

_output_discord() {
    echo_warn "Please paste everything between these lines into your issue
Make sure to replace the content where indicated, otherwise the issue might get automatically closed."
    echo "
**Apps:**		$(printf -- '`%s` ' "${list_installed[@]}")
**Server:**		$(_os_pretty), \`$(_os_arch)\`
**Git:**		$(git -C /etc/swizzin log -1 --pretty=format:'`(%h)` %s')
**Logs**
- Install logs: <${logs_install}>
- Swizzin logs: <${logs_swizzin}>
$([[ ${#logs_app_list[@]} -gt 0 ]] && printf -- '- %s <%s> %s\n' "${logs_app_list[@]}")"
}

_output_github() {
    echo_warn "Please paste everything between these lines into your issue
Make sure to replace the content where indicated, otherwise the issue might get automatically closed."
    echo "<!-- ---------------------------------------------------------- -->

## Installed swizzin apps
$(printf -- '- `%s`\n' "${list_installed[@]}")

## Server Info
- OS: $(_os_pretty)
- Arch: \`$(_os_arch)\`
- Hardware
$(dmidecode | grep -A3 '^System Information' | grep -v "System Information" | tr -d '\t' | sed 's/^/  - /')

## Swizzin version
$(git -C /etc/swizzin log -1 --pretty=format:"(%h) \`%s\` %d %an")

## Logs and output
- [Install logs](${logs_install})
- [Swizzin logs](${logs_swizzin})
$([[ ${#logs_app_list[@]} -gt 0 ]] && printf -- '- [%s](%s):\t%s\n' "${logs_app_list[@]}")
<!-- ---------------------------------------------------------- -->"
}

_choose_destination() {
    if ! destination=$(whiptail --radiolist \
        "Where are you going to paste your info" 9 50 2 \
        "GitHub" "" ON \
        "Discord" "" OFF 2>&1 > /dev/tty); then
        echo_warn "Upload cancelled"
        exit 1
    fi

    echo_info "Generating dump for $destination"
}
_choose_pastehost
_choose_destination
_make_app_choices
_set_identifiable_values
_log_uploads

if [[ $destination == "GitHub" ]]; then
    _output_github
else
    _output_discord
fi

if [[ $pastetool == "privatebin" ]]; then
    echo
    echo_info "You can find delete links for each paste in $privatebinlog"
fi
